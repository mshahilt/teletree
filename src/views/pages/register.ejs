<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register as Telecaller</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" />
    <style>
        body {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            min-height: 100vh;
        }
        .hero-banner {
            background: linear-gradient(135deg, #0d6efd 0%, #198754 100%);
            color: white;
            padding: 3rem 2rem;
            text-align: center;
            margin-bottom: 2rem;
        }
        .form-container {
            background: white;
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        .photo-preview {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid #0d6efd;
        }
        .loading-spinner {
            display: inline-block;
            width: 18px;
            height: 18px;
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: 50%;
            border-top-color: #ffffff;
            animation: spin 1s ease-in-out infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        .address-section {
            background: #f8f9fa;
            padding: 1.5rem;
            border-radius: 10px;
            border: 1px solid #dee2e6;
        }
        .crop-container {
            max-height: 400px;
            margin: 1rem 0;
        }
    </style>
</head>
<body>
    <!-- Hero Banner -->
    <div class="hero-banner">
        <h1 class="display-4 fw-bold">Register as Telecaller</h1>
        <p class="lead">Join Our Professional Team</p>
    </div>

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <div class="form-container">
                    <!-- Info Alert -->
                    <div class="alert alert-info d-flex align-items-center mb-4" role="alert">
                        <i class="bi bi-info-circle me-2"></i>
                        <div>
                            <strong>Note:</strong> Basic details like name, phone, and email have been fetched from your profile. Please verify and provide additional information below.
                        </div>
                    </div>

                    <!-- Alert Messages -->
                    <div id="alertContainer"></div>

                    <form id="signupForm" enctype="multipart/form-data">
                        <!-- Profile Photo Upload -->
                        <div class="text-center mb-4">
                            <img id="photoPreview" class="photo-preview d-none" alt="Profile Preview">
                            <div id="photoPlaceholder" class="photo-preview bg-light d-flex align-items-center justify-content-center mx-auto">
                                <i class="bi bi-person-circle text-muted" style="font-size: 3rem;"></i>
                            </div>
                            <div class="mt-3">
                                <input type="file" id="profileInput" class="d-none" accept="image/*" required>
                                <label for="profileInput" class="btn btn-outline-primary">
                                    <i class="bi bi-camera me-2"></i>Upload Profile Photo
                                </label>
                                <input type="hidden" name="profilePhoto" id="croppedImageData">
                            </div>
                            <p class="text-muted mt-2 small">Upload a clear photo for better profile visibility</p>
                        </div>

                        <div class="row g-3">
                            <!-- Basic Information -->
                            <div class="col-md-6">
                                <label class="form-label fw-semibold">
                                    <i class="bi bi-person me-2"></i>Name <span class="text-danger">*</span>
                                </label>
                                <input type="text" name="name" class="form-control" placeholder="Loading..." required>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label fw-semibold">
                                    <i class="bi bi-telephone me-2"></i>Phone Number <span class="text-danger">*</span>
                                </label>
                                <input type="text" name="phone" class="form-control" placeholder="Loading..." required>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label fw-semibold">
                                    <i class="bi bi-envelope me-2"></i>Email <span class="text-danger">*</span>
                                </label>
                                <input type="email" name="email" class="form-control" placeholder="Loading..." required>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label fw-semibold">
                                    <i class="bi bi-gender-ambiguous me-2"></i>Gender <span class="text-danger">*</span>
                                </label>
                                <select name="gender" class="form-select" required>
                                    <option value="">Select Gender</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label fw-semibold">
                                    <i class="bi bi-calendar me-2"></i>Age <span class="text-danger">*</span>
                                </label>
                                <input type="number" name="age" class="form-control" min="18" max="100" placeholder="Enter your age" required>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label fw-semibold">
                                    <i class="bi bi-award me-2"></i>Experience (Years) <span class="text-danger">*</span>
                                </label>
                                <input type="number" name="experience" class="form-control" min="0" max="50" placeholder="Years of experience" required>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label fw-semibold">
                                    <i class="bi bi-translate me-2"></i>Languages Known <span class="text-danger">*</span>
                                </label>
                                <input type="text" name="languages" class="form-control" placeholder="e.g. English, Hindi, Arabic" required>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label fw-semibold">
                                    <i class="bi bi-briefcase me-2"></i>Job Category <span class="text-danger">*</span>
                                </label>
                                <select name="jobCategory" class="form-select" required>
                                    <option value="">Select Your Specialty</option>
                                    <option value="Housekeeping">üè† Housekeeping</option>
                                    <option value="Cooking">üç≥ Cooking</option>
                                    <option value="Cleaning">üßπ Cleaning</option>
                                    <option value="Babysitting">üë∂ Babysitting</option>
                                    <option value="Elderly Care">üë¥ Elderly Care</option>
                                    <option value="Laundry">üëï Laundry</option>
                                    <option value="General Maid">‚ú® General Maid</option>
                                </select>
                            </div>
                        </div>

                        <!-- Address Section -->
                        <div class="address-section mt-4">
                            <h5 class="mb-3"><i class="bi bi-geo-alt-fill me-2"></i>Address Information</h5>
                            
                            <div class="row g-3">
                                <div class="col-12">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <label class="form-label fw-semibold mb-0">Current Location</label>
                                        <button type="button" id="getLocationBtn" class="btn btn-success btn-sm">
                                            <i class="bi bi-crosshair me-1"></i>Use My Location
                                        </button>
                                    </div>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="bi bi-geo"></i></span>
                                        <input type="text" id="coordinatesField" class="form-control" placeholder="Click 'Use My Location' to auto-detect" readonly>
                                    </div>
                                    <small class="text-muted">This helps us locate you accurately</small>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label fw-semibold">House/Building <span class="text-danger">*</span></label>
                                    <input type="text" name="house" class="form-control" placeholder="House No, Building Name" required>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label fw-semibold">Street/Area <span class="text-danger">*</span></label>
                                    <input type="text" name="street" class="form-control" placeholder="Street Name, Area" required>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label fw-semibold">Landmark</label>
                                    <input type="text" name="landmark" class="form-control" placeholder="Near landmark (optional)">
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label fw-semibold">City <span class="text-danger">*</span></label>
                                    <input type="text" name="city" class="form-control" placeholder="City name" required>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label fw-semibold">State <span class="text-danger">*</span></label>
                                    <input type="text" name="state" class="form-control" placeholder="State name" required>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label fw-semibold">PIN Code <span class="text-danger">*</span></label>
                                    <input type="text" name="pincode" class="form-control" placeholder="6-digit PIN code" pattern="[0-9]{6}" required>
                                </div>

                                <div class="col-12">
                                    <label class="form-label fw-semibold">Full Address <span class="text-danger">*</span></label>
                                    <textarea name="fullAddress" class="form-control" rows="3" placeholder="Complete address for delivery/visits" required></textarea>
                                </div>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="text-center mt-4">
                            <button type="submit" id="registerBtn" class="btn btn-primary btn-lg px-5">
                                <span id="registerBtnText">Create My Profile</span>
                                <span id="registerBtnSpinner" class="loading-spinner d-none ms-2"></span>
                            </button>
                            <p class="mt-3 text-muted small">
                                <i class="bi bi-shield-check me-1"></i>
                                Your information is secure and will be verified before activation
                            </p>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Crop Modal -->
    <div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title fw-bold">
                        <i class="bi bi-crop me-2"></i>Crop Your Profile Photo
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="crop-container">
                        <img id="imagePreview" style="max-width: 100%; display: block;">
                    </div>
                    <div class="text-center mt-3">
                        <p class="text-muted mb-0">
                            <i class="bi bi-info-circle me-1"></i>
                            Drag to reposition and use the corners to resize
                        </p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="cropBtn" class="btn btn-primary">
                        <i class="bi bi-check2 me-2"></i>Apply Crop
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let cropper;
        let userCoordinates = null;
        
        const profileInput = document.getElementById('profileInput');
        const imagePreview = document.getElementById('imagePreview');
        const photoPreview = document.getElementById('photoPreview');
        const photoPlaceholder = document.getElementById('photoPlaceholder');
        const cropModal = new bootstrap.Modal(document.getElementById('cropModal'));
        
        // Load user profile data (only basic info, no address)
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                const response = await fetch('/getMe', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to fetch profile data');
                }

                const data = await response.json();
                const thisUser = data.thisUser;

                // Populate only basic form fields (no address)
                document.querySelector('input[name="name"]').value = thisUser.name || '';
                document.querySelector('input[name="phone"]').value = thisUser.phone || '';
                document.querySelector('input[name="email"]').value = thisUser.email || '';

                // Disable basic fields and clear placeholders
                document.querySelectorAll('input[name="name"], input[name="phone"], input[name="email"]').forEach(input => {
                    input.placeholder = '';
                    input.disabled = true;
                });

            } catch (error) {
                console.error('Error fetching profile data:', error);
                showAlert('Failed to fetch profile data. Please try again.', 'danger');
            }
        });

        // Geolocation functionality
        document.getElementById('getLocationBtn').addEventListener('click', () => {
            const btn = document.getElementById('getLocationBtn');
            const coordinatesField = document.getElementById('coordinatesField');
            
            if (!navigator.geolocation) {
                showAlert('Geolocation is not supported by this browser.', 'warning');
                return;
            }

            // Show loading state
            btn.innerHTML = '<i class="bi bi-arrow-clockwise me-1"></i>Getting Location...';
            btn.disabled = true;
            coordinatesField.value = 'Locating...';

            navigator.geolocation.getCurrentPosition(
                async (position) => {
                    const latitude = position.coords.latitude;
                    const longitude = position.coords.longitude;
                    
                    userCoordinates = { latitude, longitude };
                    coordinatesField.value = `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`;
                    
                    // Try to get address from coordinates
                    try {
                        await reverseGeocode(latitude, longitude);
                        showAlert('Location detected successfully! Address fields have been auto-filled.', 'success');
                    } catch (error) {
                        showAlert('Location detected, but could not auto-fill address. Please enter manually.', 'info');
                    }
                    
                    btn.innerHTML = '<i class="bi bi-check me-1"></i>Location Found';
                    btn.classList.remove('btn-success');
                    btn.classList.add('btn-outline-success');
                },
                (error) => {
                    let errorMessage = 'Unable to get location. ';
                    switch(error.code) {
                        case error.PERMISSION_DENIED:
                            errorMessage += 'Please allow location access.';
                            break;
                        case error.POSITION_UNAVAILABLE:
                            errorMessage += 'Location information unavailable.';
                            break;
                        case error.TIMEOUT:
                            errorMessage += 'Location request timed out.';
                            break;
                        default:
                            errorMessage += 'Unknown error occurred.';
                            break;
                    }
                    
                    showAlert(errorMessage, 'warning');
                    coordinatesField.value = '';
                    btn.innerHTML = '<i class="bi bi-crosshair me-1"></i>Try Again';
                    btn.disabled = false;
                },
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 60000
                }
            );
        });

        // Reverse geocoding function (simplified - you might want to use a proper geocoding service)
        async function reverseGeocode(lat, lng) {
          const apiKey="pk.8282ee41eaa283b99e837b93190673ba";
            try {
                 const response = await fetch(
            `https://us1.locationiq.com/v1/reverse.php?key=${apiKey}&lat=${lat}&lon=${lng}&format=json`
        );

        const data = await response.json();

        if (data) {
            if (data.address) {
                const { city, state, postcode, road } = data.address;

                if (city) document.querySelector('input[name="city"]').value = city;
                if (state) document.querySelector('input[name="state"]').value = state;
                if (postcode) document.querySelector('input[name="pincode"]').value = postcode;
                if (road) document.querySelector('input[name="street"]').value = road;
            }
                }
            } catch (error) {
                console.warn('Reverse geocoding failed:', error);
            }
        }

        // PIN code validation and auto-completion
        document.querySelector('input[name="pincode"]').addEventListener('blur', async function() {
            const pincode = this.value.trim();
            if (pincode.length === 6 && /^\d{6}$/.test(pincode)) {
                try {
                    const response = await fetch(`https://api.postalpincode.in/pincode/${pincode}`);
                    const data = await response.json();
                    
                    if (data[0].Status === 'Success' && data[0].PostOffice.length > 0) {
                        const postOffice = data[0].PostOffice[0];
                        document.querySelector('input[name="city"]').value = postOffice.District;
                        document.querySelector('input[name="state"]').value = postOffice.State;
                        showAlert('PIN code verified and location details filled!', 'success');
                    }
                } catch (error) {
                    console.warn('PIN code lookup failed:', error);
                }
            }
        });

        // Auto-generate full address
        function updateFullAddress() {
            const house = document.querySelector('input[name="house"]').value;
            const street = document.querySelector('input[name="street"]').value;
            const landmark = document.querySelector('input[name="landmark"]').value;
            const city = document.querySelector('input[name="city"]').value;
            const state = document.querySelector('input[name="state"]').value;
            const pincode = document.querySelector('input[name="pincode"]').value;
            
            const addressParts = [house, street, landmark, city, state, pincode].filter(part => part.trim());
            const fullAddress = addressParts.join(', ');
            
            if (fullAddress) {
                document.querySelector('textarea[name="fullAddress"]').value = fullAddress;
            }
        }

        // Add event listeners for auto-generating full address
        ['house', 'street', 'landmark', 'city', 'state', 'pincode'].forEach(fieldName => {
            document.querySelector(`input[name="${fieldName}"]`).addEventListener('blur', updateFullAddress);
        });

        // Handle profile photo upload (keeping existing crop functionality)
        profileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (!file) return;

            if (!file.type.startsWith('image/')) {
                showAlert('Please select a valid image file.', 'warning');
                return;
            }

            if (file.size > 5 * 1024 * 1024) {
                showAlert('Image size should be less than 5MB.', 'warning');
                return;
            }

            const reader = new FileReader();
            reader.onload = () => {
                imagePreview.src = reader.result;
                cropModal.show();
            };
            reader.readAsDataURL(file);
        });

        // Initialize cropper when modal is shown
        document.getElementById('cropModal').addEventListener('shown.bs.modal', () => {
            cropper = new Cropper(imagePreview, {
                aspectRatio: 1,
                viewMode: 2,
                dragMode: 'move',
                autoCropArea: 0.8,
                restore: false,
                guides: true,
                center: true,
                highlight: false,
                cropBoxMovable: true,
                cropBoxResizable: true,
                toggleDragModeOnDblclick: false,
                minContainerWidth: 400,
                minContainerHeight: 300,
                background: false,
                modal: true,
                zoomable: true,
                scalable: true,
                rotatable: true,
                checkOrientation: false
            });
        });

        // Destroy cropper when modal is hidden
        document.getElementById('cropModal').addEventListener('hidden.bs.modal', () => {
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
        });

        // Handle crop button click
        document.getElementById('cropBtn').addEventListener('click', () => {
            if (!cropper) return;

            const canvas = cropper.getCroppedCanvas({
                width: 300,
                height: 300,
                minWidth: 256,
                minHeight: 256,
                maxWidth: 512,
                maxHeight: 512,
                fillColor: '#fff',
                imageSmoothingEnabled: true,
                imageSmoothingQuality: 'high',
            });

            const croppedImageData = canvas.toDataURL('image/jpeg', 0.9);
            document.getElementById('croppedImageData').value = croppedImageData;
            
            photoPreview.src = croppedImageData;
            photoPreview.classList.remove('d-none');
            photoPlaceholder.classList.add('d-none');
            
            cropModal.hide();
            showAlert('Profile photo uploaded successfully!', 'success');
        });

        // Show alert messages
        function showAlert(message, type = 'info') {
            const alertContainer = document.getElementById('alertContainer');
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            
            const iconMap = {
                success: 'bi-check-circle-fill',
                danger: 'bi-exclamation-triangle-fill',
                warning: 'bi-exclamation-triangle-fill',
                info: 'bi-info-circle-fill'
            };
            
            alertDiv.innerHTML = `
                <i class="bi ${iconMap[type]} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            alertContainer.appendChild(alertDiv);
            
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }

        // Form validation
        function validateForm(formData) {
            const errors = [];
            
            if (!formData.get('profilePhoto')) {
                errors.push('Profile photo is required');
            }
            
            if (!userCoordinates) {
                errors.push('Please use "Use My Location" to detect your coordinates');
            }
            
            if (!formData.get('gender')) {
                errors.push('Gender is required');
            }
            
            if (!formData.get('age') || formData.get('age') < 18 || formData.get('age') > 100) {
                errors.push('Age must be between 18 and 100');
            }
            
            if (!formData.get('experience') || formData.get('experience') < 0) {
                errors.push('Experience cannot be negative');
            }
            
            if (!formData.get('languages')) {
                errors.push('Languages are required');
            }
            
            if (!formData.get('jobCategory')) {
                errors.push('Job category is required');
            }

            // Address validation
            if (!formData.get('house')) {
                errors.push('House/Building is required');
            }
            
            if (!formData.get('street')) {
                errors.push('Street/Area is required');
            }
            
            if (!formData.get('city')) {
                errors.push('City is required');
            }
            
            if (!formData.get('state')) {
                errors.push('State is required');
            }
            
            const pincode = formData.get('pincode');
            if (!pincode || !/^\d{6}$/.test(pincode)) {
                errors.push('Valid 6-digit PIN code is required');
            }
            
            if (!formData.get('fullAddress')) {
                errors.push('Full address is required');
            }
            
            return errors;
        }

        // Handle form submission
        document.getElementById('signupForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const registerBtn = document.getElementById('registerBtn');
            const registerBtnText = document.getElementById('registerBtnText');
            const registerBtnSpinner = document.getElementById('registerBtnSpinner');
            
            // Validate form
            const validationErrors = validateForm(formData);
            if (validationErrors.length > 0) {
                showAlert(validationErrors.join('<br>'), 'danger');
                return;
            }
            
            // Show loading state
            registerBtn.disabled = true;
            registerBtnText.classList.add('d-none');
            registerBtnSpinner.classList.remove('d-none');
            
            try {
                console.log("Processing form data...");

                const form = new FormData();

                // Basic information
                form.append('name', formData.get('name'));
                form.append('phone', formData.get('phone'));
                form.append('email', formData.get('email'));
                form.append('experience', formData.get('experience'));
                form.append('age', formData.get('age'));
                form.append('gender', formData.get('gender'));
                form.append('languages', formData.get('languages'));
                form.append('jobCategory', formData.get('jobCategory'));

                // Address object
                const addressData = {
                    coordinates: userCoordinates,
                    house: formData.get('house'),
                    street: formData.get('street'),
                    landmark: formData.get('landmark') || '',
                    city: formData.get('city'),
                    state: formData.get('state'),
                    pincode: formData.get('pincode'),
                    fullAddress: formData.get('fullAddress')
                };
                
                form.append('address', JSON.stringify(addressData));

                // Convert base64 to Blob before sending
                const base64Data = document.getElementById('croppedImageData').value;
                const blob = await (await fetch(base64Data)).blob();
                form.append('profilePhoto', blob, 'profile.jpg');

                const response = await fetch('/registerAsTelecaller', {
                    method: 'POST',
                    body: form
                });

                const result = await response.json();

                if (result.success) {
                    showAlert('üéâ Registration successful! Welcome to Maids Hands 4U family!', 'success');
                    this.reset();
                    document.getElementById('croppedImageData').value = '';
                    userCoordinates = null;

                    // Reset photo preview
                    photoPreview.classList.add('d-none');
                    photoPlaceholder.classList.remove('d-none');
                    
                    // Reset location button
                    const locationBtn = document.getElementById('getLocationBtn');
                    locationBtn.innerHTML = '<i class="bi bi-crosshair me-1"></i>Use My Location';
                    locationBtn.classList.remove('btn-outline-success');
                    locationBtn.classList.add('btn-success');
                    locationBtn.disabled = false;
                    
                    document.getElementById('coordinatesField').value = '';
                    window.scrollTo({ top: 0, behavior: 'smooth' });

                } else {
                    showAlert(result.message || 'Registration failed. Please try again.', 'danger');
                }

            } catch (error) {
                console.error('Error during registration:', error);
                showAlert('Network error. Please check your connection and try again.', 'danger');
            } finally {
                registerBtn.disabled = false;
                registerBtnText.classList.remove('d-none');
                registerBtnSpinner.classList.add('d-none');
            }
        });
        </script>

        </body>
        </html>