 <%- include('../partials/header') %>
 <style>
    .footer {
      background-color: #1e1e1e;
      color: #fff;
      padding: 40px 20px;
      border-radius: 20px 20px 0 0;
    }

    .footer h5 {
      font-weight: 600;
      margin-bottom: 20px;
    }

    .footer ul {
      list-style: none;
      padding: 0;
    }

    .footer ul li {
      margin-bottom: 10px;
    }

    .footer ul li a {
      color: #fff;
      text-decoration: none;
    }

    .footer ul li a:hover {
      text-decoration: underline;
    }

    .social-icons a {
      display: inline-block;
      width: 40px;
      height: 40px;
      border: 1px solid #fff;
      border-radius: 50%;
      color: #fff;
      text-align: center;
      line-height: 40px;
      margin-right: 10px;
      font-size: 18px;
    }

    .whatsapp-float {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background-color: #25d366;
      color: white;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      z-index: 1000;
    }

    .about-banner {
      background-image: url('dummy-image.webp');
      background-size: cover;
      background-position: center;
      border-radius: 20px;
      height: 250px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
    }

    .about-banner h2 {
      font-size: 2.2rem;
      font-weight: bold;
      margin: 0;
    }

    @media (max-width: 768px) {
      .about-banner h2 {
        font-size: 1.6rem;
      }
    }

    body {
      font-family: 'Segoe UI', sans-serif;
      background-color: #f8fafc;
    }

    .form-control, .form-select {
      border-radius: 8px;
      padding: 10px;
    }

    .form-label {
      font-weight: 500;
      color: #1e293b;
    }

    .reg-btn {
      background-color: #22c55e;
      color: white;
      padding: 12px 24px;
      font-weight: 500;
      border-radius: 8px;
    }

    .reg-btn:disabled {
      background-color: #d1d5db;
      cursor: not-allowed;
    }

    .verify-btn {
      background-color: #3b82f6;
      color: white;
      border: none;
      border-radius: 8px;
      padding: 8px 16px;
      transition: background-color 0.3s ease;
    }

    .verify-btn:hover:not(:disabled) {
      background-color: #2563eb;
    }

    .verify-btn:disabled {
      background-color: #d1d5db;
      cursor: not-allowed;
    }

    .verify-btn.verified {
      background-color: #22c55e;
    }

    .signup-form {
      margin-top: 30px;
      margin: 0 auto;
      padding: 20px;
      background: white;
      border-radius: 12px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .loading-spinner {
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid #ffffff;
      border-radius: 50%;
      border-top-color: transparent;
      animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .alert {
      border-radius: 8px;
      margin-bottom: 1rem;
    }

    .otp-input {
      width: 48px;
      height: 48px;
      text-align: center;
      font-size: 1.1rem;
      font-weight: 600;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      margin: 0 4px;
    }

    .otp-input:focus {
      border-color: #3b82f6;
      box-shadow: 0 0 0 0.2rem rgba(59, 130, 246, 0.25);
    }

    .countdown {
      font-size: 0.85rem;
      color: #6b7280;
    }
  </style>

  

  <div class="container signup-form mt-5">
    <h2 class="mb-4 text-center font-bold text-2xl">Create Your Account</h2>
    <div id="alertContainer"></div>
    
    <form id="signupForm">
      <div class="row g-3">
        <div class="col-md-6">
          <label class="form-label">Full Name <span class="text-red-500">*</span></label>
          <input type="text" name="name" class="form-control" placeholder="Enter your full name" required autofocus>
        </div>
        <div class="col-md-6">
          <label class="form-label">District <span class="text-red-500">*</span></label>
          <select name="district" class="form-select" required>
            <option selected disabled>Select District</option>
                    <option>Alappuzha</option>
                    <option>Ernakulam</option>
                    <option>Idukki</option>
                    <option>Kannur</option>
                    <option>Kasaragod</option>
                    <option>Kollam</option>
                    <option>Kottayam</option>
                    <option>Kozhikode</option>
                    <option>Malappuram</option>
                    <option>Palakkad</option>
                    <option>Pathanamthitta</option>
                    <option>Thiruvananthapuram</option>
                    <option>Thrissur</option>
                    <option>Wayanad</option>
          </select>
        </div>
        <div class="col-md-6">
          <label class="form-label">Phone Number <span class="text-red-500">*</span></label>
          <div class="input-group">
            <span class="input-group-text">+91</span>
            <input type="tel" name="phone" id="phoneInput" class="form-control" placeholder="Enter your phone number" required maxlength="10">
            <button class="verify-btn ms-2" type="button" id="verifyBtn" onclick="sendOTP()">
              <span id="verifyBtnText">Verify</span>
              <span id="verifyBtnSpinner" class="loading-spinner d-none"></span>
            </button>
          </div>
        </div>
        <div class="col-md-6">
          <label class="form-label">Email Address <span class="text-red-500">*</span></label>
          <input type="email" name="email" class="form-control" placeholder="Enter your email address" required>
        </div>
        <div class="col-md-6">
          <label class="form-label">Password <span class="text-red-500">*</span></label>
          <input type="password" name="password" class="form-control" placeholder="Create a password (min 6 chars)" required minlength="6">
        </div>
        <div class="col-md-6">
          <label class="form-label">Confirm Password <span class="text-red-500">*</span></label>
          <input type="password" name="confirmPassword" class="form-control" placeholder="Confirm your password" required>
        </div>
      </div>
      <div class="mt-4 text-center">
        <button type="submit" id="registerBtn" class="reg-btn btn" disabled>
          <span id="registerBtnText">Create Account</span>
          <span id="registerBtnSpinner" class="loading-spinner d-none"></span>
        </button>
        <p class="mt-2 text-gray-600 text-sm">
          <i class="bi bi-info-circle me-1"></i>
          Verify your phone number to enable registration
        </p>
      </div>
    </form>
  </div>
  <div class="modal fade" id="otpModal" tabindex="-1" aria-labelledby="otpModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content rounded-3">
        <div class="modal-header border-0 pb-0">
          <h5 class="modal-title" id="otpModalLabel">Verify Phone Number</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body pt-2">
          <p class="text-center mb-3">
            Enter the 6-digit OTP sent to<br>
            <strong>+91 <span id="otpPhoneNumber"></span></strong>
          </p>
          <div class="d-flex justify-content-center mb-3">
            <input type="text" class="otp-input" maxlength="1" id="otp1">
            <input type="text" class="otp-input" maxlength="1" id="otp2">
            <input type="text" class="otp-input" maxlength="1" id="otp3">
            <input type="text" class="otp-input" maxlength="1" id="otp4">
            <input type="text" class="otp-input" maxlength="1" id="otp5">
            <input type="text" class="otp-input" maxlength="1" id="otp6">
          </div>
          <div class="text-center mb-3">
            <span class="countdown" id="resendTimer">Resend OTP in 60s</span>
          </div>
          <button type="button" class="btn btn-success w-100 mb-2" id="verifyOtpBtn" onclick="verifyOTP()">
            <span id="verifyOtpBtnText">Verify OTP</span>
            <span id="verifyOtpBtnSpinner" class="loading-spinner d-none"></span>
          </button>
          <button type="button" class="btn btn-outline-primary w-100" id="resendOtpBtn" onclick="resendOTP()" disabled>
            Resend OTP
          </button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    let isPhoneVerified = false;
    let resendCountdown = 0;
    let countdownInterval;
    const otpModal = new bootstrap.Modal(document.getElementById('otpModal'));

    document.getElementById('signupForm').addEventListener('input', function(e) {
      if (e.target.name === 'confirmPassword' || e.target.name === 'password') {
        validatePasswordMatch();
      }
      if (e.target.name === 'phone') {
        if (isPhoneVerified) {
          isPhoneVerified = false;
          updateVerifyButton();
          updateRegisterButton();
        }
      }
    });

    function validatePasswordMatch() {
      const password = document.querySelector('input[name="password"]').value;
      const confirmPassword = document.querySelector('input[name="confirmPassword"]').value;
      const confirmPasswordField = document.querySelector('input[name="confirmPassword"]');
      confirmPasswordField.setCustomValidity(confirmPassword && password !== confirmPassword ? 'Passwords do not match' : '');
    }

    document.querySelectorAll('.otp-input').forEach((input, index) => {
      input.addEventListener('input', function(e) {
        if (e.target.value.length === 1 && index < 5) {
          document.getElementById(`otp${index + 2}`).focus();
        }
      });
      input.addEventListener('keydown', function(e) {
        if (e.key === 'Backspace' && !e.target.value && index > 0) {
          document.getElementById(`otp${index}`).focus();
        }
      });
    });

    function showAlert(message, type = 'info') {
      const alertContainer = document.getElementById('alertContainer');
      const alertDiv = document.createElement('div');
      alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
      alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      alertContainer.appendChild(alertDiv);
      setTimeout(() => alertDiv.remove(), 5000);
    }

    async function sendOTP() {
      const phoneInput = document.getElementById('phoneInput');
      const phone = phoneInput.value.trim();
      if (!phone || phone.length !== 10 || !/^\d{10}$/.test(phone)) {
        showAlert('Please enter a valid 10-digit phone number', 'warning');
        phoneInput.focus();
        return;
      }
      const verifyBtn = document.getElementById('verifyBtn');
      const verifyBtnText = document.getElementById('verifyBtnText');
      const verifyBtnSpinner = document.getElementById('verifyBtnSpinner');
      verifyBtn.disabled = true;
      verifyBtnText.classList.add('d-none');
      verifyBtnSpinner.classList.remove('d-none');
      try {
        const response = await fetch(`/otp/send?phone=${phone}`, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        const data = await response.json();
        if (data.success) {
          document.getElementById('otpPhoneNumber').textContent = phone;
          clearOTPInputs();
          otpModal.show();
          startResendCountdown();
          showAlert('OTP sent successfully', 'success');
        } else {
          showAlert(data.message || 'Failed to send OTP', 'danger');
        }
      } catch (error) {
        console.error('Error sending OTP:', error);
        showAlert('Network error. Please try again.', 'danger');
      } finally {
        verifyBtn.disabled = false;
        verifyBtnText.classList.remove('d-none');
        verifyBtnSpinner.classList.add('d-none');
      }
    }

    async function verifyOTP() {
      const otpInputs = document.querySelectorAll('.otp-input');
      const otp = Array.from(otpInputs).map(input => input.value).join('');
      if (otp.length !== 6) {
        showAlert('Please enter a 6-digit OTP', 'warning');
        return;
      }
      const phone = document.getElementById('phoneInput').value.trim();
      const verifyOtpBtn = document.getElementById('verifyOtpBtn');
      const verifyOtpBtnText = document.getElementById('verifyOtpBtnText');
      const verifyOtpBtnSpinner = document.getElementById('verifyOtpBtnSpinner');
      verifyOtpBtn.disabled = true;
      verifyOtpBtnText.classList.add('d-none');
      verifyOtpBtnSpinner.classList.remove('d-none');
      try {
        const response = await fetch('/otp/verify', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ phone, otp })
        });
        const data = await response.json();
        if (data.success) {
          isPhoneVerified = true;
          otpModal.hide();
          updateVerifyButton();
          updateRegisterButton();
          showAlert('Phone verified successfully!', 'success');
          clearInterval(countdownInterval);
        } else {
          showAlert(data.message || 'Invalid OTP', 'danger');
          clearOTPInputs();
        }
      } catch (error) {
        console.error('Error verifying OTP:', error);
        showAlert('Network error. Please try again.', 'danger');
      } finally {
        verifyOtpBtn.disabled = false;
        verifyOtpBtnText.classList.remove('d-none');
        verifyOtpBtnSpinner.classList.add('d-none');
      }
    }

    async function resendOTP() {
      const phone = document.getElementById('phoneInput').value.trim();
      try {
        const response = await fetch(`/otp/send?phone=${phone}`, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        const data = await response.json();
        if (data.success) {
          clearOTPInputs();
          startResendCountdown();
          showAlert('OTP resent successfully', 'success');
        } else {
          showAlert(data.message || 'Failed to resend OTP', 'danger');
        }
      } catch (error) {
        console.error('Error resending OTP:', error);
        showAlert('Network error. Please try again.', 'danger');
      }
    }

    function updateVerifyButton() {
      const verifyBtn = document.getElementById('verifyBtn');
      const verifyBtnText = document.getElementById('verifyBtnText');
      if (isPhoneVerified) {
        verifyBtn.classList.add('verified');
        verifyBtn.disabled = true;
        verifyBtnText.innerHTML = '<i class="bi bi-check-circle me-1"></i>Verified';
      } else {
        verifyBtn.classList.remove('verified');
        verifyBtn.disabled = false;
        verifyBtnText.textContent = 'Verify';
      }
    }

    function updateRegisterButton() {
      document.getElementById('registerBtn').disabled = !isPhoneVerified;
    }

    function clearOTPInputs() {
      document.querySelectorAll('.otp-input').forEach(input => input.value = '');
      document.getElementById('otp1').focus();
    }

    function startResendCountdown() {
      resendCountdown = 60;
      const resendTimer = document.getElementById('resendTimer');
      const resendOtpBtn = document.getElementById('resendOtpBtn');
      resendOtpBtn.disabled = true;
      countdownInterval = setInterval(() => {
        resendCountdown--;
        resendTimer.textContent = `Resend OTP in ${resendCountdown}s`;
        if (resendCountdown <= 0) {
          clearInterval(countdownInterval);
          resendTimer.textContent = 'Did not receive OTP?';
          resendOtpBtn.disabled = false;
        }
      }, 1000);
    }

    document.getElementById('signupForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      if (!isPhoneVerified) {
        showAlert('Please verify your phone number', 'warning');
        return;
      }
      const formData = new FormData(this);
      const data = Object.fromEntries(formData.entries());
      if (data.password !== data.confirmPassword) {
        showAlert('Passwords do not match', 'warning');
        return;
      }
      const registerBtn = document.getElementById('registerBtn');
      const registerBtnText = document.getElementById('registerBtnText');
      const registerBtnSpinner = document.getElementById('registerBtnSpinner');
      registerBtn.disabled = true;
      registerBtnText.classList.add('d-none');
      registerBtnSpinner.classList.remove('d-none');
      try {
        const response = await fetch('/register', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            name: data.name,
            district: data.district,
            phone: data.phone,
            email: data.email,
            password: data.password
          })
        });
        const result = await response.json();
        if (result.success) {
          showAlert('Registration successful! Welcome to Maids Hands 4U', 'success');
          this.reset();
          isPhoneVerified = false;
          updateVerifyButton();
          updateRegisterButton();
          location.href('/login')
        } else {
          showAlert(result.message || 'Registration failed', 'danger');
        }
      } catch (error) {
        console.error('Error during registration:', error);
        showAlert('Network error. Please try again.', 'danger');
      } finally {
        registerBtn.disabled = !isPhoneVerified;
        registerBtnText.classList.remove('d-none');
        registerBtnSpinner.classList.add('d-none');
      }
    });

    document.addEventListener('DOMContentLoaded', function() {
      updateRegisterButton();
      document.querySelector('input[name="name"]').focus();
    });
  </script>
<%- include('../partials/footer') %>